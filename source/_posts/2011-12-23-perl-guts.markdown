---
layout: post
title: "Perl guts"
date: 2011-12-23 18:41
comments: true
categories: [Perl, guts, xs]
---
Я понемногу погружаюсь в кишочки Perl: XS, Perl API, Sv* в деталях. Кроме всего прочего, сейчас читаю Extending And Embeding Perl. Книжка эпохи 5.6, но считаю, что полезная. Решил выписать то, что узнал нового для себя, или вспомнил чего-то из старого.

<!-- more -->
 
- функции инлайнятся оптимизатором, если они с пустым прототипом и возращают константу: sub foo () { 123; }
- можно попросить Perl выделить под хэш нужное количество памяти заранее (чтобы избежать перестроений и уменьшить коллизии): keys %hash = 1000
- резолвинг неймспейсов A::B::C чего-то стоит (надо пробежаться по нескольким хешам), обращение к лексическим переменным быстрее
- лексические переменные привязаны к CODE-блокам (padlist), и при рекурсии копируются на каждый уровень вложенности
- у CODE-блоков есть счетчик уровня рекурсии
- треды в Perl дорогие и лучше их не юзать, с тредами имеют шанс некорректно работать многие XS-модули
– cобранный без тредов и multiplicity Perl имеет бонус в производительности
- Inline::C на самом деле существует для быстрого прототипирования, а не для продакшена: [https://metacpan.org/module/Inline::C-Cookbook](https://metacpan.org/module/Inline::C-Cookbook)
- в 5.14 довольно многое поменялось в API
- раньше у глобов была "магия", но сейчас ее, похоже, выпилили
- "магия" в Perl – это умение дергать функции при манипуляции с sv-шками (из vtable из 5 функций)
 
Посмотреть какая магия есть "унутре", в табличке после слов "The current kinds of Magic Virtual Tables are" здесь: [http://perldoc.perl.org/perlguts.html#Magic-Virtual-Tables](http://perldoc.perl.org/perlguts.html#Magic-Virtual-Tables)

Есть магия с vtable с 3 дополнительными функциями, одна из которых для клонирования.

Можно прикрутить свою "магию". Пример можно посмотреть в коде форка Javascript::V8 [https://github.com/ezhi/javascript-v8](https://github.com/ezhi/javascript-v8)
 
подборка ресурсов:
 
- [http://www.profvince.com/xs.pdf](http://www.profvince.com/xs.pdf)
- [http://perldoc.perl.org/perlapi.html](http://perldoc.perl.org/perlapi.html)
- [http://www.e1.ru/tech/documentation/perl/perlcall.html](http://www.e1.ru/tech/documentation/perl/perlcall.html)
- [http://cpansearch.perl.org/src/RURBAN/illguts-0.38/index.html](http://cpansearch.perl.org/src/RURBAN/illguts-0.38/index.html)
- [https://github.com/mirrors/perl/branches](https://github.com/mirrors/perl/branches)
- книга "Extending and Embedding Perl"

Замечание по поводу книги. Она может пригодится только для понимания каких-то базовых вещей. И может не представлять интереса для продвинутого XS-разработчика (см. [критический обзор](http://redplait.blogspot.com/2010/11/extending-and-embedding-perl.html)) Я оцениваю ее содержимое с точки зрения того, что в ней есть, а не того чего нет. 

Для того чтобы, научиться писать на XS, нужно: 

- знание C/C++
- знание структур данных в Perl (SV)
- документация Perl по xs и guts
- metacpan с примерами реального XS-кода в популярных модулях
- исходные коды Perl (не стесняться заглядывать и grep-ать там файлики – многое может стать понятнее)
- какая-то реальная задача для которой нужен XS (обертка над C-библиотекой, например).

Кстати, мне сейчас очень не достает последнего пункта, чтобы по настоящему овладеть магией внутренностей Perl. Возможно это вопрос времени, т.к. я их уже не так боюсь как раньше. )
